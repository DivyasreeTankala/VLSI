module  FIFO_block(clk, resetn,soft_reset,write_enb,read_enb,lfd_state,data_in,full,empty,data_out);
  parameter width=9;
  parameter depth=16;
  parameter addr=4;
  
  input clk, resetn,soft_reset,write_enb,read_enb,lfd_state;
  input [width-2:0]data_in;
  output reg [width-2:0]data_out;
  output full,empty;
  
  reg [addr-1:0]rd_ptr,wr_ptr;
  reg [5:0]count;
  reg [4:0]increment;
  reg temp;
  integer i;
  
  reg [width-1:0] MEM [depth-1:0];

  assign full=(increment==depth)? 1: 0;
  assign empty=(increment==0)? 1: 0; 

  
  //Lfd_state logic
  always@(posedge clk)
    begin
      if(! resetn)
        temp<=0;
      else
        temp<=1; //header available
    end
  
  //pointer logic
  always@(posedge clk)
    begin
      if(! resetn || soft_reset)
        begin
          wr_ptr<=0;
          rd_ptr<=0;
        end
      else
        begin
          if(write_enb && !full)
            wr_ptr<=wr_ptr+1;
          if(read_enb && !empty)
            rd_ptr<=rd_ptr+1;
        end
    end
  
  //write logic
  always@(posedge clk)
  begin
    if(! resetn)
      for(i=0; i<16; i=i+1)
         begin
            MEM[wr_ptr]<=0;
      end
    else
      begin 
        if(write_enb && !full)
          MEM[wr_ptr][8]<=temp;
          MEM[wr_ptr][7:0] <=data_in;
      end
  end
  
  //read logic
  always@(posedge clk)
    begin
      if( ! resetn)
        data_out<=0;
      else
        begin
          if(read_enb && !empty)
            data_out<=MEM[rd_ptr];
          if(count==0)
            data_out<=0;
        end
    end
  
  //count logic
  always@(posedge clk)
    begin
      if(read_enb  && !empty )
        begin
          if(MEM[rd_ptr][8])
            count<=MEM[rd_ptr][7:2]+1;
          if(count != 0)
            count<=count-1;
        end
    end
  
  //increment logic
  always@(posedge clk)
    begin
      if(! resetn)
        increment<=0;
      else if(write_enb && !full)
        increment<=increment+1;
      else if(read_enb && !empty)
        increment<=increment-1;
      else if((write_enb && !full) && (read_enb && !empty)) 
        increment<=increment;
    end  
endmodule 

